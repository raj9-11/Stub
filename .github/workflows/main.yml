# .github/workflows/build-vlc-selector.yml
name: Build VLC Media-Player Selector

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  MODULE: app
  PKG_NAME: org.videolan.vlc
  MIN_SDK: 21
  TARGET_SDK: 34
  COMPILE_SDK: 34
  GRADLE_VER: 8.4          # keep in sync with wrapper step
  AGP_VER: 8.1.2
  KOTLIN_VER: 1.9.10

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
    # ─────────────────────────────────────────────────────────────
    # 1  Checkout repository
    - name: Checkout
      uses: actions/checkout@v4

    # ─────────────────────────────────────────────────────────────
    # 2  Set up JDK 17 (required by AGP 8.x)
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
        cache: 'gradle'

    # ─────────────────────────────────────────────────────────────
    # 3  Set up Android SDK (cmd-line tools, platform-tools, build-tools)
    - name: Set up Android SDK
      uses: android-actions/setup-android@v3
      with:
        packages: 'build-tools;${{ env.COMPILE_SDK }} platform-tools platforms;android-${{ env.COMPILE_SDK }}'

    # ─────────────────────────────────────────────────────────────
    # 4  Generate **entire** project tree & source on-the-fly
    - name: Create project skeleton
      run: |
        set -e
        # Directories ───────────────
        base="app/src/main"
        mkdir -p \
          "$base/java/$PKG_NAME" \
          "$base/res/"{layout,values,values-television,drawable,mipmap-anydpi-v26,mipmap-mdpi,mipmap-hdpi,mipmap-xhdpi,mipmap-xxhdpi,mipmap-xxxhdpi,xml} \
          gradle/wrapper

        # Root Gradle files ─────────
        cat > settings.gradle <<EOF
        rootProject.name = "VlcSelector"
        include ':$MODULE'
        EOF

        cat > gradle.properties <<EOF
        org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
        android.useAndroidX=true
        android.enableJetifier=true
        EOF

        cat > build.gradle <<EOF
        buildscript {
            ext.kotlin_version = '$KOTLIN_VER'
            repositories { google(); mavenCentral() }
            dependencies {
                classpath 'com.android.tools.build:gradle:$AGP_VER'
                classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:\$kotlin_version"
            }
        }
        allprojects { repositories { google(); mavenCentral() } }
        EOF

        # Gradle wrapper ────────────
        cat > gradle/wrapper/gradle-wrapper.properties <<EOF
        distributionBase=GRADLE_USER_HOME
        distributionPath=wrapper/dists
        distributionUrl=https\\://services.gradle.org/distributions/gradle-$GRADLE_VER-bin.zip
        zipStoreBase=GRADLE_USER_HOME
        zipStorePath=wrapper/dists
        EOF
        curl -sL "https://services.gradle.org/distributions/gradle-$GRADLE_VER-bin.zip" -o /tmp/gradle.zip
        unzip -qq /tmp/gradle.zip -d /tmp/gradle && cp -r /tmp/gradle/gradle-$GRADLE_VER/lib/gradle-launcher-*.jar gradle/wrapper/
        cat > gradlew <<'EOE'
        #!/usr/bin/env bash
        set -e
        DIR="$(cd "$(dirname "$0")" && pwd)"
        java -jar "$DIR/gradle/wrapper/gradle-launcher-"*.jar "$@"
        EOE
        chmod +x gradlew

        # App-module Gradle ─────────
        cat > app/build.gradle <<EOF
        plugins {
            id 'com.android.application'
            id 'org.jetbrains.kotlin.android'
        }
        android {
            namespace '$PKG_NAME'
            compileSdk $COMPILE_SDK
            defaultConfig {
                applicationId "$PKG_NAME"
                minSdk $MIN_SDK
                targetSdk $TARGET_SDK
                versionCode 1
                versionName "1.0"
                testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            }
            buildTypes { release { minifyEnabled false } }
            compileOptions { sourceCompatibility 1.8 targetCompatibility 1.8 }
            kotlinOptions { jvmTarget = '1.8' }
        }
        dependencies {
            implementation 'androidx.core:core-ktx:1.12.0'
            implementation 'androidx.appcompat:appcompat:1.6.1'
            implementation 'androidx.leanback:leanback:1.2.0'
        }
        EOF

        # AndroidManifest ───────────
        cat > $base/AndroidManifest.xml <<EOF
        <manifest xmlns:android="http://schemas.android.com/apk/res/android" package="$PKG_NAME">
            <uses-feature android:name="android.software.leanback" android:required="false"/>
            <application android:label="@string/app_name" android:icon="@mipmap/ic_launcher"
                         android:theme="@style/AppTheme.Leanback" android:supportsRtl="true">
                <activity android:name=".MediaPlayerSelectorActivity" android:exported="true"
                          android:theme="@style/AppTheme.Leanback">
                    <intent-filter>
                        <action android:name="android.intent.action.MAIN"/>
                        <category android:name="android.intent.category.LEANBACK_LAUNCHER"/>
                    </intent-filter>
                    <intent-filter>
                        <action android:name="android.intent.action.VIEW"/>
                        <category android:name="android.intent.category.DEFAULT"/>
                        <data android:mimeType="video/*"/>
                        <data android:mimeType="audio/*"/>
                        <data android:scheme="http"/>
                        <data android:scheme="https"/>
                        <data android:scheme="file"/>
                        <data android:scheme="content"/>
                        <data android:scheme="rtsp"/>
                        <data android:scheme="rtmp"/>
                        <data android:scheme="mms"/>
                    </intent-filter>
                </activity>
            </application>
        </manifest>
        EOF

        # Kotlin activity ───────────
        cat > $base/java/$PKG_NAME/MediaPlayerSelectorActivity.kt <<'EOF'
        package org.videolan.vlc
        import android.app.*
        import android.content.*
        import android.net.Uri
        import android.os.Bundle
        import android.widget.Toast

        class MediaPlayerSelectorActivity : Activity() {
            private val players = listOf(
                "org.xbmc.kodi" to "Kodi",
                "net.gtvbox.videoplayer" to "Vimu Player",
                "com.mxtech.videoplayer.ad" to "MX Player"
            )
            override fun onCreate(savedInstanceState: Bundle?) {
                super.onCreate(savedInstanceState)
                val uri = intent?.data ?: run { finish(); return }
                val mime = intent?.type ?: "video/*"
                val installed = players.filter { isInstalled(it.first) }
                if (installed.isEmpty()) { chooser(uri, mime); return }
                val names = installed.map { it.second }.toTypedArray()
                AlertDialog.Builder(this, android.R.style.Theme_Holo_Dialog_MinWidth)
                    .setTitle("Select player")
                    .setItems(names) { _, i -> launch(installed[i].first, uri, mime) }
                    .setOnCancelListener { finish() }
                    .show()
            }
            private fun isInstalled(p: String) = runCatching {
                packageManager.getPackageInfo(p, 0); true
            }.getOrDefault(false)
            private fun launch(pkg: String, uri: Uri, mime: String) {
                val it = Intent(Intent.ACTION_VIEW).setDataAndType(uri, mime).setPackage(pkg)
                startActivity(it); finish()
            }
            private fun chooser(uri: Uri, mime: String) {
                val it = Intent(Intent.ACTION_VIEW).setDataAndType(uri, mime)
                startActivity(Intent.createChooser(it, "Select player")); finish()
            }
        }
        EOF

        # Resources ────────────────
        cat > $base/res/values/strings.xml <<EOF
        <resources><string name="app_name">VLC Selector</string></resources>
        EOF
        cat > $base/res/values/styles.xml <<EOF
        <resources>
            <style name="AppTheme.Leanback" parent="Theme.Leanback"/>
        </resources>
        EOF

        # Adaptive icon (placeholder) ──
        cat > $base/res/drawable/ic_launcher_background.xml <<EOF
        <shape xmlns:android="http://schemas.android.com/apk/res/android" android:shape="rectangle">
            <solid android:color="#3DDC84"/>
        </shape>
        EOF
        cat > $base/res/drawable/ic_launcher_foreground.xml <<EOF
        <vector xmlns:android="http://schemas.android.com/apk/res/android"
                android:width="108dp" android:height="108dp"
                android:viewportWidth="108" android:viewportHeight="108">
            <path android:fillColor="#000" android:pathData="M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z"/>
        </vector>
        EOF
        cat > $base/res/mipmap-anydpi-v26/ic_launcher.xml <<EOF
        <adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
            <background android:drawable="@drawable/ic_launcher_background"/>
            <foreground android:drawable="@drawable/ic_launcher_foreground"/>
        </adaptive-icon>
        EOF
        # Legacy PNGs (re-use foreground vector via aapt) are generated automatically at build time.

    # ─────────────────────────────────────────────────────────────
    # 5  Gradle wrapper permissions
    - name: Make gradlew executable
      run: chmod +x gradlew

    # ─────────────────────────────────────────────────────────────
    # 6  Compile & test (fails fast on any error)
    - name: Clean
      run: ./gradlew clean --no-daemon

    - name: Assemble Debug
      run: ./gradlew :$MODULE:assembleDebug --no-daemon --stacktrace

    - name: Assemble Release
      run: ./gradlew :$MODULE:assembleRelease --no-daemon --stacktrace

    # ─────────────────────────────────────────────────────────────
    # 7  Upload build artifacts
    - name: Upload Debug APK
      uses: actions/upload-artifact@v4
      with:
        name: vlc-selector-debug
        path: ${{ env.MODULE }}/build/outputs/apk/debug/*.apk

    - name: Upload Release APK (unsigned)
      uses: actions/upload-artifact@v4
      with:
        name: vlc-selector-release-unsigned
        path: ${{ env.MODULE }}/build/outputs/apk/release/*.apk
